# backend/test_connections.py
import os
import sys
from dotenv import load_dotenv

# Carrega .env
load_dotenv()

print("üîç Testando conex√µes...\n")

# 1. Teste Supabase
print("1Ô∏è‚É£ Testando Supabase...")
try:
    from models.database import Database
    if Database.test_connection():
        print("‚úÖ Supabase conectado!")
    else:
        print("‚ùå Erro na conex√£o Supabase")
except Exception as e:
    print(f"‚ùå Erro Supabase: {e}")

# 2. Teste R2
print("\n2Ô∏è‚É£ Testando Cloudflare R2...")
try:
    from utils.r2_storage import R2Storage
    r2 = R2Storage()
    # Tenta listar buckets
    print("‚úÖ R2 configurado!")
except Exception as e:
    print(f"‚ùå Erro R2: {e}")

# 3. Teste OpenAI
print("\n3Ô∏è‚É£ Testando OpenAI...")
try:
    from openai import OpenAI
    client = OpenAI()
    # Testa com uma chamada simples
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": "Diga 'ok' se funcionar"}],
        max_tokens=10
    )
    print("‚úÖ OpenAI conectado!")
except Exception as e:
    print(f"‚ùå Erro OpenAI: {e}")

# 4. Verifica modelos Whisper
print("\n4Ô∏è‚É£ Verificando Whisper...")
try:
    from services.transcription import WhisperTranscriber
    print("‚úÖ Whisper dispon√≠vel!")
except Exception as e:
    print(f"‚ùå Erro Whisper: {e}")

print("\n‚ú® Teste conclu√≠do!")

# 5. Teste de cria√ß√£o de usu√°rio
print("\n5Ô∏è‚É£ Testando cria√ß√£o de usu√°rio...")
try:
    from services.auth_service import AuthService
    auth = AuthService()
    
    # Tenta criar usu√°rio de teste
    import time
    test_email = f"teste_{int(time.time())}@example.com"
    result = auth.create_user(test_email, "127.0.0.1")
    
    if result['success']:
        print(f"‚úÖ Usu√°rio criado: {result['user_id']}")
        print(f"   Email: {test_email}")
    else:
        print("‚ùå Erro ao criar usu√°rio")
except Exception as e:
    print(f"‚ùå Erro: {e}")

print("\nüéØ Pr√≥ximo passo: rodar a API com 'python app.py'")# backend/test_connections.py
import os
import sys
from dotenv import load_dotenv

# Carrega .env
load_dotenv()

print("üîç Testando conex√µes...\n")

# 1. Teste Supabase
print("1Ô∏è‚É£ Testando Supabase...")
try:
    from models.database import Database
    if Database.test_connection():
        print("‚úÖ Supabase conectado!")
    else:
        print("‚ùå Erro na conex√£o Supabase")
except Exception as e:
    print(f"‚ùå Erro Supabase: {e}")

# 2. Teste R2
print("\n2Ô∏è‚É£ Testando Cloudflare R2...")
try:
    from utils.r2_storage import R2Storage
    r2 = R2Storage()
    # Tenta listar buckets
    print("‚úÖ R2 configurado!")
except Exception as e:
    print(f"‚ùå Erro R2: {e}")

# 3. Teste OpenAI
print("\n3Ô∏è‚É£ Testando OpenAI...")
try:
    from openai import OpenAI
    client = OpenAI()
    # Testa com uma chamada simples
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": "Diga 'ok' se funcionar"}],
        max_tokens=10
    )
    print("‚úÖ OpenAI conectado!")
except Exception as e:
    print(f"‚ùå Erro OpenAI: {e}")

# 4. Verifica modelos Whisper
print("\n4Ô∏è‚É£ Verificando Whisper...")
try:
    from services.transcription import WhisperTranscriber
    print("‚úÖ Whisper dispon√≠vel!")
except Exception as e:
    print(f"‚ùå Erro Whisper: {e}")

print("\n‚ú® Teste conclu√≠do!")

# 5. Teste de cria√ß√£o de usu√°rio
print("\n5Ô∏è‚É£ Testando cria√ß√£o de usu√°rio...")
try:
    from services.auth_service import AuthService
    auth = AuthService()
    
    # Tenta criar usu√°rio de teste
    import time
    test_email = f"teste_{int(time.time())}@example.com"
    result = auth.create_user(test_email, "127.0.0.1")
    
    if result['success']:
        print(f"‚úÖ Usu√°rio criado: {result['user_id']}")
        print(f"   Email: {test_email}")
    else:
        print("‚ùå Erro ao criar usu√°rio")
except Exception as e:
    print(f"‚ùå Erro: {e}")

print("\nüéØ Pr√≥ximo passo: rodar a API com 'python app.py'")